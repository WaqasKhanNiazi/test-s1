//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace office360.Models.EDMX
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SESEntities : DbContext
    {
        public SESEntities()
            : base("name=SESEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccFeeChallan> AccFeeChallan { get; set; }
        public virtual DbSet<AccFeeChallanDetail> AccFeeChallanDetail { get; set; }
        public virtual DbSet<AccFeeStructure> AccFeeStructure { get; set; }
        public virtual DbSet<AccFeeStructureDetail> AccFeeStructureDetail { get; set; }
        public virtual DbSet<AccJournal> AccJournal { get; set; }
        public virtual DbSet<AccLedgerFee> AccLedgerFee { get; set; }
        public virtual DbSet<AccStudentOB> AccStudentOB { get; set; }
        public virtual DbSet<AppClass> AppClass { get; set; }
        public virtual DbSet<AppClassRegistration> AppClassRegistration { get; set; }
        public virtual DbSet<AppSession> AppSession { get; set; }
        public virtual DbSet<AppStudent> AppStudent { get; set; }
        public virtual DbSet<GeneralBranch> GeneralBranch { get; set; }
        public virtual DbSet<GeneralCompany> GeneralCompany { get; set; }
        public virtual DbSet<GeneralCompanyModule> GeneralCompanyModule { get; set; }
        public virtual DbSet<GeneralCompanySetting> GeneralCompanySetting { get; set; }
        public virtual DbSet<GeneralEmailSetting> GeneralEmailSetting { get; set; }
        public virtual DbSet<GeneralEnrollmentSetting> GeneralEnrollmentSetting { get; set; }
        public virtual DbSet<GeneralRightSetting> GeneralRightSetting { get; set; }
        public virtual DbSet<GeneralUser> GeneralUser { get; set; }
        public virtual DbSet<GeneralUserRight> GeneralUserRight { get; set; }
        public virtual DbSet<SideMenu> SideMenu { get; set; }
        public virtual DbSet<StructureCOAAccounts> StructureCOAAccounts { get; set; }
        public virtual DbSet<StructureFeeType> StructureFeeType { get; set; }
        public virtual DbSet<Vendors> Vendors { get; set; }
        public virtual DbSet<GeneralBranchSetting> GeneralBranchSetting { get; set; }
        public virtual DbSet<BillingMethods> BillingMethods { get; set; }
        public virtual DbSet<CampusTypes> CampusTypes { get; set; }
        public virtual DbSet<ChallanMethods> ChallanMethods { get; set; }
        public virtual DbSet<ChargingMethods> ChargingMethods { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<CoaCatagories> CoaCatagories { get; set; }
        public virtual DbSet<CoaTypes> CoaTypes { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<DocType> DocType { get; set; }
        public virtual DbSet<DocumentStatus> DocumentStatus { get; set; }
        public virtual DbSet<EducationBoard> EducationBoard { get; set; }
        public virtual DbSet<EnrollmentTypes> EnrollmentTypes { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<MartialStatus> MartialStatus { get; set; }
        public virtual DbSet<Occupations> Occupations { get; set; }
        public virtual DbSet<OrganizationType> OrganizationType { get; set; }
        public virtual DbSet<RegistrationTypes> RegistrationTypes { get; set; }
        public virtual DbSet<Relationships> Relationships { get; set; }
        public virtual DbSet<Religions> Religions { get; set; }
        public virtual DbSet<Rights> Rights { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<StudyGroups> StudyGroups { get; set; }
        public virtual DbSet<StudyLevel> StudyLevel { get; set; }
        public virtual DbSet<URLTypes> URLTypes { get; set; }
        public virtual DbSet<WorkingShifts> WorkingShifts { get; set; }
    
        [DbFunction("SESEntities", "fn_CodeSplitByCommaAsUniqueIdentifier")]
        public virtual IQueryable<fn_CodeSplitByCommaAsUniqueIdentifier_Result> fn_CodeSplitByCommaAsUniqueIdentifier(string psCSString)
        {
            var psCSStringParameter = psCSString != null ?
                new ObjectParameter("psCSString", psCSString) :
                new ObjectParameter("psCSString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_CodeSplitByCommaAsUniqueIdentifier_Result>("[SESEntities].[fn_CodeSplitByCommaAsUniqueIdentifier](@psCSString)", psCSStringParameter);
        }
    
        [DbFunction("SESEntities", "fn_GetCommaSepratedValuesInList")]
        public virtual IQueryable<fn_GetCommaSepratedValuesInList_Result> fn_GetCommaSepratedValuesInList(string psCSString)
        {
            var psCSStringParameter = psCSString != null ?
                new ObjectParameter("psCSString", psCSString) :
                new ObjectParameter("psCSString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetCommaSepratedValuesInList_Result>("[SESEntities].[fn_GetCommaSepratedValuesInList](@psCSString)", psCSStringParameter);
        }
    
        public virtual int AccFeeChallan_Insert(Nullable<System.Guid> id, string description, Nullable<System.Guid> sessionId, Nullable<System.Guid> classId, Nullable<int> registrationTypeId, Nullable<System.Guid> classRegistrationId, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> expiryDate, Nullable<System.Guid> feeStructureId, Nullable<decimal> grossRecievable, Nullable<decimal> lateFee, Nullable<decimal> discount, Nullable<decimal> netRecievable, Nullable<System.Guid> createdBy, Nullable<int> documentStatus, Nullable<int> docType, Nullable<System.Guid> branchId, Nullable<System.Guid> companyId, ObjectParameter response)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(System.Guid));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(System.Guid));
    
            var registrationTypeIdParameter = registrationTypeId.HasValue ?
                new ObjectParameter("RegistrationTypeId", registrationTypeId) :
                new ObjectParameter("RegistrationTypeId", typeof(int));
    
            var classRegistrationIdParameter = classRegistrationId.HasValue ?
                new ObjectParameter("ClassRegistrationId", classRegistrationId) :
                new ObjectParameter("ClassRegistrationId", typeof(System.Guid));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("FeeStructureId", feeStructureId) :
                new ObjectParameter("FeeStructureId", typeof(System.Guid));
    
            var grossRecievableParameter = grossRecievable.HasValue ?
                new ObjectParameter("GrossRecievable", grossRecievable) :
                new ObjectParameter("GrossRecievable", typeof(decimal));
    
            var lateFeeParameter = lateFee.HasValue ?
                new ObjectParameter("LateFee", lateFee) :
                new ObjectParameter("LateFee", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var netRecievableParameter = netRecievable.HasValue ?
                new ObjectParameter("NetRecievable", netRecievable) :
                new ObjectParameter("NetRecievable", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccFeeChallan_Insert", idParameter, descriptionParameter, sessionIdParameter, classIdParameter, registrationTypeIdParameter, classRegistrationIdParameter, transactionDateParameter, dueDateParameter, expiryDateParameter, feeStructureIdParameter, grossRecievableParameter, lateFeeParameter, discountParameter, netRecievableParameter, createdByParameter, documentStatusParameter, docTypeParameter, branchIdParameter, companyIdParameter, response);
        }
    
        public virtual int AccFeeChallanDetail_Insert(Nullable<System.Guid> feeChallanId, Nullable<System.Guid> feeTypeId, Nullable<decimal> actualAmount, Nullable<decimal> chargedAmount, Nullable<decimal> difference)
        {
            var feeChallanIdParameter = feeChallanId.HasValue ?
                new ObjectParameter("FeeChallanId", feeChallanId) :
                new ObjectParameter("FeeChallanId", typeof(System.Guid));
    
            var feeTypeIdParameter = feeTypeId.HasValue ?
                new ObjectParameter("FeeTypeId", feeTypeId) :
                new ObjectParameter("FeeTypeId", typeof(System.Guid));
    
            var actualAmountParameter = actualAmount.HasValue ?
                new ObjectParameter("ActualAmount", actualAmount) :
                new ObjectParameter("ActualAmount", typeof(decimal));
    
            var chargedAmountParameter = chargedAmount.HasValue ?
                new ObjectParameter("ChargedAmount", chargedAmount) :
                new ObjectParameter("ChargedAmount", typeof(decimal));
    
            var differenceParameter = difference.HasValue ?
                new ObjectParameter("Difference", difference) :
                new ObjectParameter("Difference", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccFeeChallanDetail_Insert", feeChallanIdParameter, feeTypeIdParameter, actualAmountParameter, chargedAmountParameter, differenceParameter);
        }
    
        public virtual ObjectResult<AccFeeStructure_GetDetailsByParam_Result> AccFeeStructure_GetDetailsByParam()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccFeeStructure_GetDetailsByParam_Result>("AccFeeStructure_GetDetailsByParam");
        }
    
        public virtual ObjectResult<AccFeeStructure_Rp_GetByParam_Result> AccFeeStructure_Rp_GetByParam(Nullable<System.Guid> feeStructureId)
        {
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("FeeStructureId", feeStructureId) :
                new ObjectParameter("FeeStructureId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccFeeStructure_Rp_GetByParam_Result>("AccFeeStructure_Rp_GetByParam", feeStructureIdParameter);
        }
    
        public virtual ObjectResult<AccFeeStructureDetails_Rp_GetByParam_Result> AccFeeStructureDetails_Rp_GetByParam(Nullable<System.Guid> feeStructureId)
        {
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("FeeStructureId", feeStructureId) :
                new ObjectParameter("FeeStructureId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccFeeStructureDetails_Rp_GetByParam_Result>("AccFeeStructureDetails_Rp_GetByParam", feeStructureIdParameter);
        }
    
        public virtual int AccJournal_Insert(string code, Nullable<System.DateTime> transactionDate, string folioNo, string reference, string description, Nullable<System.Guid> debitAccountId, Nullable<decimal> debitAmount, Nullable<System.Guid> creditAccountId, Nullable<decimal> creditAmount, Nullable<decimal> balanceAmount, Nullable<System.Guid> createdBy, Nullable<int> docType, Nullable<System.Guid> branchId, Nullable<System.Guid> companyId)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var folioNoParameter = folioNo != null ?
                new ObjectParameter("FolioNo", folioNo) :
                new ObjectParameter("FolioNo", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var debitAccountIdParameter = debitAccountId.HasValue ?
                new ObjectParameter("DebitAccountId", debitAccountId) :
                new ObjectParameter("DebitAccountId", typeof(System.Guid));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var creditAccountIdParameter = creditAccountId.HasValue ?
                new ObjectParameter("CreditAccountId", creditAccountId) :
                new ObjectParameter("CreditAccountId", typeof(System.Guid));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccJournal_Insert", codeParameter, transactionDateParameter, folioNoParameter, referenceParameter, descriptionParameter, debitAccountIdParameter, debitAmountParameter, creditAccountIdParameter, creditAmountParameter, balanceAmountParameter, createdByParameter, docTypeParameter, branchIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<AppClass_GetListByParam_Result> AppClass_GetListByParam(Nullable<System.Guid> companyId, Nullable<System.Guid> branchId, Nullable<System.Guid> sessionId, Nullable<System.Guid> classId, string listCondition)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(System.Guid));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(System.Guid));
    
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AppClass_GetListByParam_Result>("AppClass_GetListByParam", companyIdParameter, branchIdParameter, sessionIdParameter, classIdParameter, listConditionParameter);
        }
    
        public virtual int AppClass_Insert(string description, Nullable<System.Guid> branchId, Nullable<System.Guid> companyId, Nullable<System.Guid> createdBy, Nullable<System.Guid> studyLevelId, Nullable<System.Guid> studyGroupId, ObjectParameter response, ObjectParameter code_)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var studyLevelIdParameter = studyLevelId.HasValue ?
                new ObjectParameter("StudyLevelId", studyLevelId) :
                new ObjectParameter("StudyLevelId", typeof(System.Guid));
    
            var studyGroupIdParameter = studyGroupId.HasValue ?
                new ObjectParameter("StudyGroupId", studyGroupId) :
                new ObjectParameter("StudyGroupId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppClass_Insert", descriptionParameter, branchIdParameter, companyIdParameter, createdByParameter, studyLevelIdParameter, studyGroupIdParameter, response, code_);
        }
    
        public virtual int AppClassRegistration_Insert(Nullable<System.Guid> sessionId, Nullable<System.Guid> studentId, Nullable<System.Guid> classId, Nullable<int> documentStatus, Nullable<int> docType, Nullable<System.Guid> createdBy, Nullable<System.Guid> branchId, Nullable<System.Guid> companyId, ObjectParameter response, Nullable<bool> registrationTypeId)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(System.Guid));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(System.Guid));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(System.Guid));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var registrationTypeIdParameter = registrationTypeId.HasValue ?
                new ObjectParameter("RegistrationTypeId", registrationTypeId) :
                new ObjectParameter("RegistrationTypeId", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppClassRegistration_Insert", sessionIdParameter, studentIdParameter, classIdParameter, documentStatusParameter, docTypeParameter, createdByParameter, branchIdParameter, companyIdParameter, response, registrationTypeIdParameter);
        }
    
        public virtual int AppSession_Insert(string description, Nullable<System.DateTime> sessionStartOn, Nullable<System.DateTime> sessionEndOn, Nullable<int> documentStatus, Nullable<System.Guid> companyId, Nullable<System.Guid> branchId, Nullable<System.Guid> createdBy, string openClassIds, Nullable<System.Guid> enrollmentTypeId, ObjectParameter response, ObjectParameter code_)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var sessionStartOnParameter = sessionStartOn.HasValue ?
                new ObjectParameter("SessionStartOn", sessionStartOn) :
                new ObjectParameter("SessionStartOn", typeof(System.DateTime));
    
            var sessionEndOnParameter = sessionEndOn.HasValue ?
                new ObjectParameter("SessionEndOn", sessionEndOn) :
                new ObjectParameter("SessionEndOn", typeof(System.DateTime));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var openClassIdsParameter = openClassIds != null ?
                new ObjectParameter("OpenClassIds", openClassIds) :
                new ObjectParameter("OpenClassIds", typeof(string));
    
            var enrollmentTypeIdParameter = enrollmentTypeId.HasValue ?
                new ObjectParameter("EnrollmentTypeId", enrollmentTypeId) :
                new ObjectParameter("EnrollmentTypeId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppSession_Insert", descriptionParameter, sessionStartOnParameter, sessionEndOnParameter, documentStatusParameter, companyIdParameter, branchIdParameter, createdByParameter, openClassIdsParameter, enrollmentTypeIdParameter, response, code_);
        }
    
        public virtual int AppStudent_Insert(Nullable<System.Guid> id, Nullable<System.Guid> sessionId, string firstName, string lastName, string cnicNo_FormBNo, Nullable<System.Guid> genderId, Nullable<System.DateTime> dOB, Nullable<System.Guid> martialStatusId, Nullable<System.Guid> religionId, Nullable<System.Guid> nationalityId, string resedenitalAddress, string mobileNumber, string emailAddress, string parentName, string parentCnic, Nullable<System.Guid> parentStudyLevelId, Nullable<System.Guid> occupationId, Nullable<System.Guid> relationshipId, Nullable<decimal> monthlyIncome, Nullable<int> documentStatus, Nullable<System.Guid> createdBy, Nullable<System.Guid> branchId, Nullable<System.Guid> companyId, Nullable<int> docType, ObjectParameter code_, ObjectParameter response)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(System.Guid));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var cnicNo_FormBNoParameter = cnicNo_FormBNo != null ?
                new ObjectParameter("CnicNo_FormBNo", cnicNo_FormBNo) :
                new ObjectParameter("CnicNo_FormBNo", typeof(string));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(System.Guid));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var martialStatusIdParameter = martialStatusId.HasValue ?
                new ObjectParameter("MartialStatusId", martialStatusId) :
                new ObjectParameter("MartialStatusId", typeof(System.Guid));
    
            var religionIdParameter = religionId.HasValue ?
                new ObjectParameter("ReligionId", religionId) :
                new ObjectParameter("ReligionId", typeof(System.Guid));
    
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(System.Guid));
    
            var resedenitalAddressParameter = resedenitalAddress != null ?
                new ObjectParameter("ResedenitalAddress", resedenitalAddress) :
                new ObjectParameter("ResedenitalAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var parentNameParameter = parentName != null ?
                new ObjectParameter("ParentName", parentName) :
                new ObjectParameter("ParentName", typeof(string));
    
            var parentCnicParameter = parentCnic != null ?
                new ObjectParameter("ParentCnic", parentCnic) :
                new ObjectParameter("ParentCnic", typeof(string));
    
            var parentStudyLevelIdParameter = parentStudyLevelId.HasValue ?
                new ObjectParameter("ParentStudyLevelId", parentStudyLevelId) :
                new ObjectParameter("ParentStudyLevelId", typeof(System.Guid));
    
            var occupationIdParameter = occupationId.HasValue ?
                new ObjectParameter("OccupationId", occupationId) :
                new ObjectParameter("OccupationId", typeof(System.Guid));
    
            var relationshipIdParameter = relationshipId.HasValue ?
                new ObjectParameter("RelationshipId", relationshipId) :
                new ObjectParameter("RelationshipId", typeof(System.Guid));
    
            var monthlyIncomeParameter = monthlyIncome.HasValue ?
                new ObjectParameter("MonthlyIncome", monthlyIncome) :
                new ObjectParameter("MonthlyIncome", typeof(decimal));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppStudent_Insert", idParameter, sessionIdParameter, firstNameParameter, lastNameParameter, cnicNo_FormBNoParameter, genderIdParameter, dOBParameter, martialStatusIdParameter, religionIdParameter, nationalityIdParameter, resedenitalAddressParameter, mobileNumberParameter, emailAddressParameter, parentNameParameter, parentCnicParameter, parentStudyLevelIdParameter, occupationIdParameter, relationshipIdParameter, monthlyIncomeParameter, documentStatusParameter, createdByParameter, branchIdParameter, companyIdParameter, docTypeParameter, code_, response);
        }
    
        public virtual ObjectResult<Nullable<int>> DevCheckDuplicateRecord(string tableName, string selectColumns, string whereClause)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var selectColumnsParameter = selectColumns != null ?
                new ObjectParameter("SelectColumns", selectColumns) :
                new ObjectParameter("SelectColumns", typeof(string));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DevCheckDuplicateRecord", tableNameParameter, selectColumnsParameter, whereClauseParameter);
        }
    
        public virtual int DevInsertHistory(string tableName, string columnNames, string columnValues, ObjectParameter status)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnNamesParameter = columnNames != null ?
                new ObjectParameter("ColumnNames", columnNames) :
                new ObjectParameter("ColumnNames", typeof(string));
    
            var columnValuesParameter = columnValues != null ?
                new ObjectParameter("ColumnValues", columnValues) :
                new ObjectParameter("ColumnValues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DevInsertHistory", tableNameParameter, columnNamesParameter, columnValuesParameter, status);
        }
    
        public virtual ObjectResult<Nullable<int>> DevUpdateRecords(string tableName, string setClause, string whereClause)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var setClauseParameter = setClause != null ?
                new ObjectParameter("SetClause", setClause) :
                new ObjectParameter("SetClause", typeof(string));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DevUpdateRecords", tableNameParameter, setClauseParameter, whereClauseParameter);
        }
    
        public virtual int GeneralBranch_Insert(string description, Nullable<System.Guid> campusTypeId, Nullable<System.Guid> organizationTypeId, Nullable<System.Guid> countryId, Nullable<System.Guid> cityId, string address, string contactNo, string emailAddress, string nTNNo, string remarks, Nullable<System.Guid> companyId, Nullable<System.Guid> createdBy, ObjectParameter code, ObjectParameter response)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var campusTypeIdParameter = campusTypeId.HasValue ?
                new ObjectParameter("CampusTypeId", campusTypeId) :
                new ObjectParameter("CampusTypeId", typeof(System.Guid));
    
            var organizationTypeIdParameter = organizationTypeId.HasValue ?
                new ObjectParameter("OrganizationTypeId", organizationTypeId) :
                new ObjectParameter("OrganizationTypeId", typeof(System.Guid));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(System.Guid));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(System.Guid));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var nTNNoParameter = nTNNo != null ?
                new ObjectParameter("NTNNo", nTNNo) :
                new ObjectParameter("NTNNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralBranch_Insert", descriptionParameter, campusTypeIdParameter, organizationTypeIdParameter, countryIdParameter, cityIdParameter, addressParameter, contactNoParameter, emailAddressParameter, nTNNoParameter, remarksParameter, companyIdParameter, createdByParameter, code, response);
        }
    
        public virtual ObjectResult<GeneralCompany_GetDetailById_Result> GeneralCompany_GetDetailById(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralCompany_GetDetailById_Result>("GeneralCompany_GetDetailById", idParameter);
        }
    
        public virtual ObjectResult<GeneralCompanyModule_GetDetailByParam_Result> GeneralCompanyModule_GetDetailByParam(Nullable<System.Guid> companyId, string listCondition)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralCompanyModule_GetDetailByParam_Result>("GeneralCompanyModule_GetDetailByParam", companyIdParameter, listConditionParameter);
        }
    
        public virtual ObjectResult<GeneralCompanySetting_GetDetailByParam_Result> GeneralCompanySetting_GetDetailByParam(Nullable<System.Guid> companyId, string listCondition)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralCompanySetting_GetDetailByParam_Result>("GeneralCompanySetting_GetDetailByParam", companyIdParameter, listConditionParameter);
        }
    
        public virtual ObjectResult<GeneralEmailSetting_GetDetailByParam_Result> GeneralEmailSetting_GetDetailByParam(Nullable<System.Guid> companyId, string listCondition, Nullable<System.Guid> branchId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralEmailSetting_GetDetailByParam_Result>("GeneralEmailSetting_GetDetailByParam", companyIdParameter, listConditionParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<GeneralEnrollmentSetting_GetDetailsByParam_Result> GeneralEnrollmentSetting_GetDetailsByParam(string listCondition, Nullable<System.Guid> companyId, Nullable<System.Guid> branchId)
        {
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralEnrollmentSetting_GetDetailsByParam_Result>("GeneralEnrollmentSetting_GetDetailsByParam", listConditionParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual int GeneralEnrollmentSetting_Insert(Nullable<System.Guid> enrollmentTypeId, Nullable<System.Guid> branchId, Nullable<System.Guid> companyId, Nullable<System.Guid> createdBy, Nullable<System.Guid> updatedBy, Nullable<System.DateTime> expiredOn)
        {
            var enrollmentTypeIdParameter = enrollmentTypeId.HasValue ?
                new ObjectParameter("EnrollmentTypeId", enrollmentTypeId) :
                new ObjectParameter("EnrollmentTypeId", typeof(System.Guid));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            var expiredOnParameter = expiredOn.HasValue ?
                new ObjectParameter("ExpiredOn", expiredOn) :
                new ObjectParameter("ExpiredOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralEnrollmentSetting_Insert", enrollmentTypeIdParameter, branchIdParameter, companyIdParameter, createdByParameter, updatedByParameter, expiredOnParameter);
        }
    
        public virtual ObjectResult<GeneralRightSetting_GetByParam_Result> GeneralRightSetting_GetByParam(Nullable<System.Guid> companyId, Nullable<System.Guid> uRLTypeId, Nullable<bool> status, string listCondition, string menu, Nullable<System.Guid> userId, Nullable<System.Guid> rightId, string rightPath)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var uRLTypeIdParameter = uRLTypeId.HasValue ?
                new ObjectParameter("URLTypeId", uRLTypeId) :
                new ObjectParameter("URLTypeId", typeof(System.Guid));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            var menuParameter = menu != null ?
                new ObjectParameter("Menu", menu) :
                new ObjectParameter("Menu", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var rightIdParameter = rightId.HasValue ?
                new ObjectParameter("RightId", rightId) :
                new ObjectParameter("RightId", typeof(System.Guid));
    
            var rightPathParameter = rightPath != null ?
                new ObjectParameter("RightPath", rightPath) :
                new ObjectParameter("RightPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralRightSetting_GetByParam_Result>("GeneralRightSetting_GetByParam", companyIdParameter, uRLTypeIdParameter, statusParameter, listConditionParameter, menuParameter, userIdParameter, rightIdParameter, rightPathParameter);
        }
    
        public virtual ObjectResult<GeneralUser_GetDetailByParameter_Result> GeneralUser_GetDetailByParameter(string listCondition, Nullable<int> companyId, Nullable<bool> isLogIn, string userName, string password, Nullable<System.Guid> id)
        {
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isLogInParameter = isLogIn.HasValue ?
                new ObjectParameter("IsLogIn", isLogIn) :
                new ObjectParameter("IsLogIn", typeof(bool));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralUser_GetDetailByParameter_Result>("GeneralUser_GetDetailByParameter", listConditionParameter, companyIdParameter, isLogInParameter, userNameParameter, passwordParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GeneralUser_Insert(string name, string userName, string password, string emailAddress, string mobileNumber, Nullable<System.Guid> roleId, Nullable<bool> isLogIn, string allowedBranchIds, Nullable<System.DateTime> createdOn, Nullable<System.Guid> createdBy, Nullable<System.DateTime> updatedOn, Nullable<System.Guid> updatedBy, Nullable<System.Guid> companyId, Nullable<System.Guid> employeeId, Nullable<bool> isDeveloper)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var isLogInParameter = isLogIn.HasValue ?
                new ObjectParameter("IsLogIn", isLogIn) :
                new ObjectParameter("IsLogIn", typeof(bool));
    
            var allowedBranchIdsParameter = allowedBranchIds != null ?
                new ObjectParameter("AllowedBranchIds", allowedBranchIds) :
                new ObjectParameter("AllowedBranchIds", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(System.Guid));
    
            var isDeveloperParameter = isDeveloper.HasValue ?
                new ObjectParameter("IsDeveloper", isDeveloper) :
                new ObjectParameter("IsDeveloper", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GeneralUser_Insert", nameParameter, userNameParameter, passwordParameter, emailAddressParameter, mobileNumberParameter, roleIdParameter, isLogInParameter, allowedBranchIdsParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, companyIdParameter, employeeIdParameter, isDeveloperParameter);
        }
    
        public virtual int InsertAppClass(string description, Nullable<System.Guid> branchId, Nullable<System.Guid> companyId, Nullable<System.Guid> createdBy, Nullable<System.DateTime> updatedOn, Nullable<System.Guid> updatedBy, Nullable<System.DateTime> expiredOn)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            var expiredOnParameter = expiredOn.HasValue ?
                new ObjectParameter("ExpiredOn", expiredOn) :
                new ObjectParameter("ExpiredOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAppClass", descriptionParameter, branchIdParameter, companyIdParameter, createdByParameter, updatedOnParameter, updatedByParameter, expiredOnParameter);
        }
    
        public virtual int InsertStudent(Nullable<System.Guid> admissionId, string code, string firstName, string lastName, string cnicNo_FormBNo, Nullable<System.Guid> gender, Nullable<System.DateTime> dOB, Nullable<System.Guid> martialStatusId, Nullable<System.Guid> religionId, Nullable<System.Guid> nationalityId, Nullable<System.Guid> cityId, string resedenitalAddress, string mobileNumber, string emailAddress, string parentName, string parentCnic, Nullable<System.Guid> parentStudyLevelId, Nullable<System.Guid> occupationId, Nullable<System.Guid> relationshipId, Nullable<decimal> monthlyIncome, Nullable<int> documentStatus, Nullable<System.Guid> createdBy, Nullable<System.Guid> updatedBy, Nullable<System.Guid> branchId, Nullable<System.Guid> companyId, Nullable<int> docType)
        {
            var admissionIdParameter = admissionId.HasValue ?
                new ObjectParameter("AdmissionId", admissionId) :
                new ObjectParameter("AdmissionId", typeof(System.Guid));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var cnicNo_FormBNoParameter = cnicNo_FormBNo != null ?
                new ObjectParameter("CnicNo_FormBNo", cnicNo_FormBNo) :
                new ObjectParameter("CnicNo_FormBNo", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(System.Guid));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var martialStatusIdParameter = martialStatusId.HasValue ?
                new ObjectParameter("MartialStatusId", martialStatusId) :
                new ObjectParameter("MartialStatusId", typeof(System.Guid));
    
            var religionIdParameter = religionId.HasValue ?
                new ObjectParameter("ReligionId", religionId) :
                new ObjectParameter("ReligionId", typeof(System.Guid));
    
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(System.Guid));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(System.Guid));
    
            var resedenitalAddressParameter = resedenitalAddress != null ?
                new ObjectParameter("ResedenitalAddress", resedenitalAddress) :
                new ObjectParameter("ResedenitalAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var parentNameParameter = parentName != null ?
                new ObjectParameter("ParentName", parentName) :
                new ObjectParameter("ParentName", typeof(string));
    
            var parentCnicParameter = parentCnic != null ?
                new ObjectParameter("ParentCnic", parentCnic) :
                new ObjectParameter("ParentCnic", typeof(string));
    
            var parentStudyLevelIdParameter = parentStudyLevelId.HasValue ?
                new ObjectParameter("ParentStudyLevelId", parentStudyLevelId) :
                new ObjectParameter("ParentStudyLevelId", typeof(System.Guid));
    
            var occupationIdParameter = occupationId.HasValue ?
                new ObjectParameter("OccupationId", occupationId) :
                new ObjectParameter("OccupationId", typeof(System.Guid));
    
            var relationshipIdParameter = relationshipId.HasValue ?
                new ObjectParameter("RelationshipId", relationshipId) :
                new ObjectParameter("RelationshipId", typeof(System.Guid));
    
            var monthlyIncomeParameter = monthlyIncome.HasValue ?
                new ObjectParameter("MonthlyIncome", monthlyIncome) :
                new ObjectParameter("MonthlyIncome", typeof(decimal));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(System.Guid));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudent", admissionIdParameter, codeParameter, firstNameParameter, lastNameParameter, cnicNo_FormBNoParameter, genderParameter, dOBParameter, martialStatusIdParameter, religionIdParameter, nationalityIdParameter, cityIdParameter, resedenitalAddressParameter, mobileNumberParameter, emailAddressParameter, parentNameParameter, parentCnicParameter, parentStudyLevelIdParameter, occupationIdParameter, relationshipIdParameter, monthlyIncomeParameter, documentStatusParameter, createdByParameter, updatedByParameter, branchIdParameter, companyIdParameter, docTypeParameter);
        }
    
        public virtual ObjectResult<SideMenu_GetList_Result> SideMenu_GetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SideMenu_GetList_Result>("SideMenu_GetList");
        }
    }
}
